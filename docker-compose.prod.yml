version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: aisim-postgres-prod
    environment:
      POSTGRES_DB: aisim_ads
      POSTGRES_USER: aisim
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - aisim-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aisim"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: aisim-redis-prod
    ports:
      - "6379:6379"
    networks:
      - aisim-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    image: aisim-backend:latest
    container_name: aisim-backend-prod
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://aisim:${DB_PASSWORD}@postgres:5432/aisim_ads
      REDIS_URL: redis://redis:6379
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      BRAVE_API_KEY: ${BRAVE_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: ${BACKEND_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aisim-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./backend/src:/app/src

  frontend:
    image: aisim-frontend:latest
    container_name: aisim-frontend-prod
    ports:
      - "3001:3000"
    environment:
      NEXT_PUBLIC_API_URL: ${BACKEND_URL}
      NEXT_PUBLIC_STRIPE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - aisim-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: aisim-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - aisim-network-prod
    restart: unless-stopped

  monitoring:
    image: prom/prometheus:latest
    container_name: aisim-monitoring-prod
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - aisim-network-prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
  prometheus_data:

networks:
  aisim-network-prod:
    driver: bridge
